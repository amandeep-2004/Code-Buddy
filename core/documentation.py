from typing import Dict, Any
import json
from datetime import datetime


class DocumentationGenerator:
    """Generate documentation in various formats from code analysis results"""
    
    def __init__(self):
        self.template_markdown = """# Code Documentation

**File:** {filename}
**Language:** {language}
**Lines of Code:** {line_count}
**Complexity:** {complexity}
**Generated:** {timestamp}

## Summary
{summary}

## Functions
{functions_section}

## Classes
{classes_section}

---
*Generated by Code Analysis and Documentation Generator*
"""

        self.template_html = """<!DOCTYPE html>
<html>
<head>
    <title>Code Documentation - {filename}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        .header {{ background-color: #f4f4f4; padding: 10px; border-radius: 5px; }}
        .section {{ margin: 20px 0; }}
        .function, .class {{ background-color: #f9f9f9; padding: 10px; margin: 10px 0; border-left: 4px solid #007acc; }}
        .summary {{ background-color: #e7f3ff; padding: 15px; border-radius: 5px; }}
        pre {{ background-color: #f4f4f4; padding: 10px; overflow-x: auto; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>Code Documentation</h1>
        <p><strong>File:</strong> {filename}</p>
        <p><strong>Language:</strong> {language}</p>
        <p><strong>Lines of Code:</strong> {line_count}</p>
        <p><strong>Complexity:</strong> {complexity}</p>
        <p><strong>Generated:</strong> {timestamp}</p>
    </div>
    
    <div class="section">
        <h2>Summary</h2>
        <div class="summary">{summary}</div>
    </div>
    
    <div class="section">
        <h2>Functions</h2>
        {functions_section}
    </div>
    
    <div class="section">
        <h2>Classes</h2>
        {classes_section}
    </div>
    
    <footer>
        <hr>
        <p><em>Generated by Code Analysis and Documentation Generator</em></p>
    </footer>
</body>
</html>"""

    def generate_markdown_documentation(self, analysis_result: Dict[str, Any]) -> str:
        """Generate Markdown documentation from analysis results"""
        if 'error' in analysis_result:
            return f"# Error\n\n{analysis_result['error']}"
        
        # Generate functions section
        functions_section = ""
        if analysis_result.get('functions'):
            for func in analysis_result['functions']:
                params = ", ".join(func.get('parameters', [])) if func.get('parameters') else "None"
                docstring = func.get('docstring', 'No documentation available')
                
                functions_section += f"""
### {func['name']}()
- **Type:** {func['type']}
- **Parameters:** {params}
- **Lines:** {func['line_start']}-{func['line_end']}
- **Documentation:** {docstring}

"""
        else:
            functions_section = "No functions found.\n"
        
        # Generate classes section
        classes_section = ""
        if analysis_result.get('classes'):
            for cls in analysis_result['classes']:
                docstring = cls.get('docstring', 'No documentation available')
                
                classes_section += f"""
### {cls['name']}
- **Type:** {cls['type']}
- **Lines:** {cls['line_start']}-{cls['line_end']}
- **Documentation:** {docstring}

"""
        else:
            classes_section = "No classes found.\n"
        
        return self.template_markdown.format(
            filename=analysis_result.get('filename', 'Unknown'),
            language=analysis_result.get('language', 'Unknown'),
            line_count=analysis_result.get('line_count', 0),
            complexity=analysis_result.get('complexity', 0),
            timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            summary=analysis_result.get('summary', 'No summary available'),
            functions_section=functions_section,
            classes_section=classes_section
        )
    
    def generate_html_documentation(self, analysis_result: Dict[str, Any]) -> str:
        """Generate HTML documentation from analysis results"""
        if 'error' in analysis_result:
            return f"<html><body><h1>Error</h1><p>{analysis_result['error']}</p></body></html>"
        
        # Generate functions section
        functions_section = ""
        if analysis_result.get('functions'):
            for func in analysis_result['functions']:
                params = ", ".join(func.get('parameters', [])) if func.get('parameters') else "None"
                docstring = func.get('docstring', 'No documentation available')
                
                functions_section += f"""
        <div class="function">
            <h3>{func['name']}()</h3>
            <p><strong>Type:</strong> {func['type']}</p>
            <p><strong>Parameters:</strong> {params}</p>
            <p><strong>Lines:</strong> {func['line_start']}-{func['line_end']}</p>
            <p><strong>Documentation:</strong> {docstring}</p>
        </div>
"""
        else:
            functions_section = "<p>No functions found.</p>\n"
        
        # Generate classes section
        classes_section = ""
        if analysis_result.get('classes'):
            for cls in analysis_result['classes']:
                docstring = cls.get('docstring', 'No documentation available')
                
                classes_section += f"""
        <div class="class">
            <h3>{cls['name']}</h3>
            <p><strong>Type:</strong> {cls['type']}</p>
            <p><strong>Lines:</strong> {cls['line_start']}-{cls['line_end']}</p>
            <p><strong>Documentation:</strong> {docstring}</p>
        </div>
"""
        else:
            classes_section = "<p>No classes found.</p>\n"
        
        return self.template_html.format(
            filename=analysis_result.get('filename', 'Unknown'),
            language=analysis_result.get('language', 'Unknown'),
            line_count=analysis_result.get('line_count', 0),
            complexity=analysis_result.get('complexity', 0),
            timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            summary=analysis_result.get('summary', 'No summary available'),
            functions_section=functions_section,
            classes_section=classes_section
        )
    
    def generate_json_documentation(self, analysis_result: Dict[str, Any]) -> str:
        """Generate JSON documentation from analysis results"""
        doc_result = {
            **analysis_result,
            'generated_at': datetime.now().isoformat(),
            'generator': 'Code Analysis and Documentation Generator'
        }
        return json.dumps(doc_result, indent=2)
    
    def generate_documentation(self, analysis_result: Dict[str, Any], format_type: str = "markdown") -> str:
        """Generate documentation in specified format"""
        format_type = format_type.lower()
        
        if format_type == "markdown":
            return self.generate_markdown_documentation(analysis_result)
        elif format_type == "html":
            return self.generate_html_documentation(analysis_result)
        elif format_type == "json":
            return self.generate_json_documentation(analysis_result)
        else:
            raise ValueError(f"Unsupported format: {format_type}")
